[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nfrom shiny import reactive, render, req\nimport seaborn as sns\nimport pandas as pd\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = load_penguins()\n\n# Sidebar and attribute selectize\nui.page_opts(title=\"Sean Penguin Data\", fillable=True)\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Inputs\")\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select Attribute\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n\n    # Plotly bins number input\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 50)\n    \n    # seaborn bins slider\n    ui.input_slider(\n        \"seaborn_bin_count\",\n        \"Seaborn Bin Count\",\n        1,\n        50,\n        25,\n    )\n    \n    # Species Selection\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n    \n    # Horizontal Rule\n    ui.hr()\n    \n    # Link\n    ui.a(\n        \"GitHub\",\n        href=\"https://github.com/SMStclair/cintel-02-data\",\n        target=\"_blank\",\n    )\n    \n# Accordion Tabset (click on a band to expand) for data table and grid\nwith ui.accordion(id=\"acc\", open=\"closed\"):\n    with ui.accordion_panel(\"Data Table\"):\n        @render.data_frame\n        def penguin_datatable():\n            return render.DataTable(penguins_df)\n\n    with ui.accordion_panel(\"Data Grid\"):\n        @render.data_frame\n        def penguin_datagrid():\n            return render.DataGrid(penguins_df)\n\n# Navigation Card Tabset (Click on a tab to show contents) for 3 charts\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Plotly Histogram\"):\n\n        @render_plotly\n        def plotly_histogram():\n            plotly_hist = px.histogram(\n                data_frame=filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            ).update_layout(\n                title=\"Plotly Penguins Data\",\n                xaxis_title=\"Selected Attribute\",\n                yaxis_title=\"Count\",\n            )\n            return plotly_hist\n\n    with ui.nav_panel(\"Seaborn Histogram\"):\n\n        @render.plot\n        def seaborn_histogram():\n            seaborn_hist = sns.histplot(\n                data=filtered_data(),\n                x=input.selected_attribute(),\n                bins=input.seaborn_bin_count(),\n            )\n            seaborn_hist.set_title(\"Seaborn Penguin Data\")\n            seaborn_hist.set_xlabel(\"Selected Attribute\")\n            seaborn_hist.set_ylabel(\"Count\")\n\n    with ui.nav_panel(\"Plotly Scatterplot\"):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            plotly_scatter = px.scatter(\n                filtered_data(),\n                x=\"bill_depth_mm\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                size_max=8,\n                labels={\n                    \"bill_depth_mm\": \"Bill Depth (mm)\",\n                    \"bill_length_mm\": \"Bill Length(mm)\",\n                },\n            )\n            return plotly_scatter\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.selected_species_list())]\n", "type": "text"}]